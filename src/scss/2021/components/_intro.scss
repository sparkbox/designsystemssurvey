$animation-delay-base: 500ms;
$animation-delay-factor: 250ms;

.cmp-intro {
  @media (min-width: mq(md)) {
    min-height: 100vh;
  }

  &__title-container {
    --grid-size: 6;

    width: 100%;
    position: relative;
    display: grid;
    grid-template-columns: repeat(var(--grid-size), 1fr);
    grid-auto-rows: minmax(1rem, auto);

    @media (min-width: mq(md)) {
      --grid-size: 12;
    }

    @media (min-width: mq(lg)) {
      --grid-size: 12;
    }
  }

  &__text {
    font-family: var(--font-mono);
    font-size: mq(sm) * 0.15;
    line-height: 0.875;
    font-weight: 200;

    @media(min-width: mq(sm)) {
      font-size: 15vw;
    }

    @media(min-width: mq(md)) {
      font-size: 12vw;
    }

    @media(min-width: mq(lg)) {
      font-size: 9rem;
    }

    &:nth-child(1) {
      grid-column: 1 / span 6;
      grid-row-start: 1;
      animation-delay: calc(#{$animation-delay-base} + (1 * #{$animation-delay-factor}));
    }

    &:nth-child(2) {
      grid-column: 2 / span 5;
      grid-row-start: 2;
      animation-delay: calc(#{$animation-delay-base} + (2 * #{$animation-delay-factor}));
    }

    &:nth-child(3) {
      grid-column: 3 / span 5;
      grid-row-start: 3;
      font-weight: 900;
      margin-bottom: 1em;
      animation-delay: calc(#{$animation-delay-base} + (3 * #{$animation-delay-factor}));
    }

    &--year {
      font-weight: 700;
      margin-bottom: 0.5em;
      margin-top: 5.5rem;
      font-size: 1rem;
      font-family: var(--font-sans);

      @media(min-width: mq(md)) {
        margin-top: 0; 
        font-size: 12vw;
        font-family: var(--font-mono);
        text-shadow: stroke(var(--color-rust));
        color: var(--color-neutral-1);
        font-weight: 900;
        transform: translateY(-0.2em);
        margin-bottom: 0.5em;
      }
    }
  }

  &__arrow-positioner {
    margin-top: 4rem;

    @media(min-width: mq(md)) {
      margin-top: auto;
      position: absolute;
      top: 0;
      right: 0;
      left: 0;
      height: 100vh;
      pointer-events: none;
      display: flex;
      align-items: flex-end;
    }

    .obj-grid {
      flex: 2 0 100%;
    }
  }

  &__arrow-container {
    width: 100%;
    max-width: 7.5rem;
    position: relative;

    &::after {
      content: '';
      display: block;
      padding-top: 100%;
    }

    @include ie11 {
      display: none;
    }
  }

  &__arrow {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    stroke: var(--color-neutral-3);
    stroke-width: 3px;
  }

  // Transition styles

  .js &__text--transition,
  .js &__art-element--transition {
    // Hide elements that will animate if JS is active
    opacity: 0;
  }

  .js &__text--transition.appear-done,
  .js &__art-element--transition.appear,
  .js &__art-element--transition.appear-done {
    // Show elements after animation has run
    opacity: 1;
  }

  .js &__text--transition.appear-active {
    animation-name: enter;
    animation-duration: var(--time-xl);
    animation-timing-function: var(--timing-smooth);
    animation-fill-mode: both;
  }

  @for $i from 1 through 4 {
    &__art-element--transition.appear-active path:nth-child(#{$i}) {
      // Stagger in animation for the art element in the intro component
      animation-name: enterMove;
      animation-duration: var(--time-xl);

      // This delay calculation adds the time for the text animation plus a new delay
      // factor for this art element animation. This factor is subtracted because
      // the layers are in reverse order in order to ensure they overlap correctly.
      animation-delay: calc(#{$animation-delay-base} + var(--time-xl) + (3 * #{$animation-delay-factor}) - (#{$i} * #{$animation-delay-factor}));
      animation-timing-function: var(--timing-smooth);
      animation-fill-mode: both;
      transform-origin: bottom left;
    }
  }
}

@keyframes enter {
  0% {
    opacity: 0;
    transform: translateY(-1rem);
  }
  100% {
    opacity: 1;
    transform: none;
  }
}

@keyframes enterMove {
  0% {
    stroke: var(--color-neutral-1);
    transform: translate(-2rem, 0);
  }
  100% {
    stroke: var(--color-rust);
    transform: none;
  }
}
