$side: (
  bottom,
  top,
  left,
  right,
  all,
  vertical,
  horizontal
);

.util-margin {
  // This outputs regular spacing classes
  @each $side in $side {
    &-#{$side} {
      @each $spacer-key, $spacer-value in $spacers {
        &-#{$spacer-key} {
          @include margin-spacing($side, $spacer-key);
        }
      }
    }
  }

  /* stylelint-disable max-nesting-depth */
  // This outputs responsive spacing classes
  @each $bp-key, $bp-value in $grid-breakpoints {
    @each $side in $side {
      &-#{$side} {
        @each $spacer-key, $spacer-value in $spacers {
          @if $bp-key != print {
            @media (min-width: #{$bp-value}) {
              &-#{$spacer-key}\@#{$bp-key} {
                @include margin-spacing($side, $spacer-key);
              }
            }
          }
          @else {
            @media print {
              &-#{$spacer-key}\@#{$bp-key} {
                @include margin-spacing($side, $spacer-key);
              }
            }
          }
        }
      }
    }
  }
}

.util-pad {
  // This outputs regular spacing classes
  @each $side in $side {
    &-#{$side} {
      @each $spacer-key, $spacer-value in $spacers {
        &-#{$spacer-key} {
          @include padding-spacing($side, $spacer-key);
        }
      }
    }
  }

  // This outputs responsive spacing classes
  @each $bp-key, $bp-value in $grid-breakpoints {
    @each $side in $side {
      &-#{$side} {
        @each $spacer-key, $spacer-value in $spacers {
          @if $bp-key != print {
            @media (min-width: #{$bp-value}) {
              &-#{$spacer-key}\@#{$bp-key} {
                @include padding-spacing($side, $spacer-key);
              }
            }
          }
          @else {
            @media print {
              &-#{$spacer-key}\@#{$bp-key} {
                @include padding-spacing($side, $spacer-key);
              }
            }
          }
        }
      }
    }
  }
}
