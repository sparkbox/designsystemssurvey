// Mixins
@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}


@mixin print($type:null) {
  @if $type == all {
    @media print {
      -webkit-print-color-adjust: exact !important; // Chrome, Safari
      color-adjust: exact !important; // Firefox
    }
  }
  @else if $type == none {
    @media print {
      display: none !important;
    }
  }
  @else {
    @media print {
      @content;
    }
  }
}

@mixin unbuttonize {
  // This removes styles added by default to button elements.
  // For when something should semantically be a button,
  // but isn't buttony in appearance.
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;
  text-align: inherit;
  font: inherit;
  border-radius: 0;
  appearance: none; // Just in case we missed anything.
}

@mixin skip-trigger {
  display: block;
  bottom: 100%;
  position: absolute;
  height: 5em;
  width: 100%;
  padding: space(md) space(xs);
  text-align: center;

  @supports (display: flex) {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &:active,
  &:focus {
    background-color: gray(100);
    color: gray(0);
    top: 0;
    bottom: auto;
    z-index: z-index(8);
    @include print(none);
  }
}

@mixin visually-hidden($status:null) {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); // IE6, IE7
  clip: rect(1px, 1px, 1px, 1px);
  padding: 0 !important;
  border: 0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden;

  @if $status == 'disable' {
    position: static !important;
    clip: unset !important;
    padding: 0 !important;
    border: 0 !important;
    height: auto !important;
    width: auto !important;
    overflow: visible;
  }
}

@mixin delist {
  // This removes default list styles
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin unlink {
  text-decoration: none;
  color: inherit;
}

// SVG URL fixer Icons by Taylor Hunt
// http://codepen.io/tigt/post/optimizing-svgs-in-data-uris
//  Function to create an optimized svg url
@function svg($svg) {
  //  Add missing namespace
  @if not str-index($svg,xmlns) {
    $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //   Encode
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '%', '%25');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $chunk: str-replace($chunk, '{', '%7B');
    $chunk: str-replace($chunk, '}', '%7D');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '=', '%3D');
    $chunk: str-replace($chunk, ':', '%3A');
    $chunk: str-replace($chunk, ';', '%3B');
    $chunk: str-replace($chunk, '|', '%7C');
    $chunk: str-replace($chunk, '[', '%5B');
    $chunk: str-replace($chunk, ']', '%5D');
    $chunk: str-replace($chunk, '^', '%5E');
    $chunk: str-replace($chunk, '`', '%60');
    $chunk: str-replace($chunk, '?', '%3F');
    $chunk: str-replace($chunk, '@', '%40');

    //    The maybe list
    //    Keep size and compile time down
    //    ... only add on documented fail
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index, str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace), $string);
}

@mixin disable-subpixel-font-rendering {
  // When light text is displayed on a dark background, it can tend to
  // look muddy. This mixin prevents that from happening.
  -webkit-font-smoothing: antialiased;
}
